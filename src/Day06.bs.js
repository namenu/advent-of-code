// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Garter = require("./Garter.bs.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = Belt_Array.map(Fs.readFileSync("input/day06.in", "utf8").trim().split("\t"), Caml_format.caml_int_of_string);

function distributeUnsafe(banks) {
  var i = Garter.$$Array.maxIndex(banks);
  var length = banks.length;
  var blocks = banks[i];
  banks[i] = 0;
  var _blocks = blocks;
  var _j = Caml_int32.mod_(i + 1 | 0, length);
  while(true) {
    var j = _j;
    var blocks$1 = _blocks;
    if (blocks$1 <= 0) {
      return banks;
    }
    Garter.$$Array.updateUnsafe(banks, j, (function (param) {
            return 1 + param | 0;
          }));
    _j = Caml_int32.mod_(j + 1 | 0, length);
    _blocks = blocks$1 - 1 | 0;
    continue ;
  };
}

var cmp = Caml_obj.caml_compare;

var IntArrayCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function findDupe(s) {
  var _history = Belt_Map.make(IntArrayCmp);
  var _idx = 0;
  while(true) {
    var idx = _idx;
    var history = _history;
    var v = Stream.next(s);
    var prevIdx = Belt_Map.get(history, v);
    if (prevIdx !== undefined) {
      return [
              prevIdx,
              idx
            ];
    }
    _idx = idx + 1 | 0;
    _history = Belt_Map.set(history, v, idx);
    continue ;
  };
}

function bankStream(init) {
  var state = {
    contents: init
  };
  return Stream.from(function (param) {
              var state$prime = state.contents.slice(0);
              state.contents = distributeUnsafe(state.contents);
              return state$prime;
            });
}

var match = Belt_Option.getExn(findDupe(bankStream(input)));

var to_ = match[1];

var from = match[0];

console.log(to_);

console.log(to_ - from | 0);

exports.input = input;
exports.distributeUnsafe = distributeUnsafe;
exports.IntArrayCmp = IntArrayCmp;
exports.findDupe = findDupe;
exports.bankStream = bankStream;
exports.from = from;
exports.to_ = to_;
/* input Not a pure module */
