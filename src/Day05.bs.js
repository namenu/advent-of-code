// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function make(offsets) {
  return {
          offsets: offsets.slice(0),
          pos: 0
        };
}

function step(offsetFn, param) {
  var pos = param.pos;
  var offsets = param.offsets;
  var o = offsets[pos];
  offsets[pos] = Curry._1(offsetFn, o);
  return {
          offsets: offsets,
          pos: pos + o | 0
        };
}

function isOutOfRange(param) {
  var pos = param.pos;
  if (pos < 0) {
    return true;
  } else {
    return pos >= param.offsets.length;
  }
}

function run(m, offsetFnOpt, param) {
  var offsetFn = offsetFnOpt !== undefined ? offsetFnOpt : (function (o) {
        return o + 1 | 0;
      });
  var _m = m;
  var _count = 0;
  while(true) {
    var count = _count;
    var m$1 = _m;
    if (isOutOfRange(m$1)) {
      return count;
    }
    _count = count + 1 | 0;
    _m = step(offsetFn, m$1);
    continue ;
  };
}

var Maze = {
  make: make,
  step: step,
  isOutOfRange: isOutOfRange,
  run: run
};

var input = Belt_Array.map(Fs.readFileSync("input/day05.in", "utf8").trim().split("\n"), Caml_format.caml_int_of_string);

function part1(param) {
  console.log(run({
            offsets: input.slice(0),
            pos: 0
          }, undefined, undefined));
  
}

function part2(param) {
  var offsetFn = function (o) {
    if (o >= 3) {
      return o - 1 | 0;
    } else {
      return o + 1 | 0;
    }
  };
  console.log(run({
            offsets: input.slice(0),
            pos: 0
          }, offsetFn, undefined));
  
}

part1(undefined);

part2(undefined);

exports.Maze = Maze;
exports.input = input;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
