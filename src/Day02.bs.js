// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var lines = Fs.readFileSync("input/day02.in", "utf8").trim().split("\n");

function parseInts(line) {
  return Belt_Array.map(line.split("\t"), Caml_format.caml_int_of_string);
}

var input = Belt_Array.map(lines, parseInts);

function part1(param) {
  return Belt_Array.reduce(Belt_Array.map(input, (function (row) {
                    return Belt_Array.reduce(row, Pervasives.min_int, (function (prim, prim$1) {
                                  if (prim > prim$1) {
                                    return prim;
                                  } else {
                                    return prim$1;
                                  }
                                })) - Belt_Array.reduce(row, Pervasives.max_int, (function (prim, prim$1) {
                                  if (prim < prim$1) {
                                    return prim;
                                  } else {
                                    return prim$1;
                                  }
                                })) | 0;
                  })), 0, (function (prim, prim$1) {
                return prim + prim$1 | 0;
              }));
}

function part2(param) {
  var intQuot = function (xs, x) {
    return Belt_Option.map(Belt_List.getBy(xs, (function (y) {
                      if (Caml_int32.mod_(x, y) === 0) {
                        return true;
                      } else {
                        return Caml_int32.mod_(y, x) === 0;
                      }
                    })), (function (d) {
                  return Caml_int32.div(d > x ? d : x, d < x ? d : x);
                }));
  };
  return Belt_Array.reduce(Belt_Array.map(input, (function (xs) {
                    var _xs = Belt_List.fromArray(xs);
                    while(true) {
                      var xs$1 = _xs;
                      if (!xs$1) {
                        return 0;
                      }
                      var ys = xs$1.tl;
                      var q = intQuot(ys, xs$1.hd);
                      if (q !== undefined) {
                        return q;
                      }
                      _xs = ys;
                      continue ;
                    };
                  })), 0, (function (prim, prim$1) {
                return prim + prim$1 | 0;
              }));
}

console.log(part1(undefined));

console.log(part2(undefined));

exports.input = input;
exports.part1 = part1;
exports.part2 = part2;
/* lines Not a pure module */
