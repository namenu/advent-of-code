// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function fromString(s) {
  var headBody = s.split(" -> ");
  var head = headBody[0];
  var r = Belt_Option.getExn(Caml_option.null_to_opt(/(\w+) \((\d+)\)/.exec(head)));
  var matches = Belt_Array.map(r, (function (prim) {
          if (prim == null) {
            return ;
          } else {
            return Caml_option.some(prim);
          }
        }));
  var name = Belt_Option.getExn(matches[1]);
  var weight = Caml_format.caml_int_of_string(Belt_Option.getExn(matches[2]));
  var body = Belt_Array.get(headBody, 1);
  if (body === undefined) {
    return {
            TAG: /* Internal */0,
            _0: name,
            _1: weight
          };
  }
  var children = body.split(", ");
  return {
          TAG: /* External */1,
          _0: name,
          _1: weight,
          _2: children
        };
}

var Program = {
  fromString: fromString
};

var programs = Belt_Array.map(Fs.readFileSync("input/day07.in", "utf8").trim().split("\n"), fromString);

function buildParentMap(programs) {
  return Belt_Array.reduce(programs, undefined, (function (m, p) {
                if (!p.TAG) {
                  return m;
                }
                var parent = p._0;
                return Belt_Array.reduce(p._2, m, (function (m, child) {
                              return Belt_MapString.set(m, child, parent);
                            }));
              }));
}

function findRoot(tree, _node) {
  while(true) {
    var node = _node;
    var parent = Belt_MapString.get(tree, node);
    if (parent === undefined) {
      return node;
    }
    _node = parent;
    continue ;
  };
}

function part1(param) {
  console.log(findRoot(buildParentMap(programs), "llyhqfe"));
  
}

exports.Program = Program;
exports.programs = programs;
exports.buildParentMap = buildParentMap;
exports.findRoot = findRoot;
exports.part1 = part1;
/* programs Not a pure module */
