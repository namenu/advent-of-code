// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function takeExn(list, cnt) {
  var l = Belt_List.take(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function dropExn(list, cnt) {
  var l = Belt_List.drop(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var List = {
  length: Belt_List.length,
  size: Belt_List.size,
  head: Belt_List.head,
  headExn: Belt_List.headExn,
  tail: Belt_List.tail,
  tailExn: Belt_List.tailExn,
  add: Belt_List.add,
  get: Belt_List.get,
  getExn: Belt_List.getExn,
  make: Belt_List.make,
  makeByU: Belt_List.makeByU,
  makeBy: Belt_List.makeBy,
  shuffle: Belt_List.shuffle,
  drop: Belt_List.drop,
  take: Belt_List.take,
  splitAt: Belt_List.splitAt,
  concat: Belt_List.concat,
  concatMany: Belt_List.concatMany,
  reverseConcat: Belt_List.reverseConcat,
  flatten: Belt_List.flatten,
  mapU: Belt_List.mapU,
  map: Belt_List.map,
  zip: Belt_List.zip,
  zipByU: Belt_List.zipByU,
  zipBy: Belt_List.zipBy,
  mapWithIndexU: Belt_List.mapWithIndexU,
  mapWithIndex: Belt_List.mapWithIndex,
  fromArray: Belt_List.fromArray,
  toArray: Belt_List.toArray,
  reverse: Belt_List.reverse,
  mapReverseU: Belt_List.mapReverseU,
  mapReverse: Belt_List.mapReverse,
  forEachU: Belt_List.forEachU,
  forEach: Belt_List.forEach,
  forEachWithIndexU: Belt_List.forEachWithIndexU,
  forEachWithIndex: Belt_List.forEachWithIndex,
  reduceU: Belt_List.reduceU,
  reduce: Belt_List.reduce,
  reduceWithIndexU: Belt_List.reduceWithIndexU,
  reduceWithIndex: Belt_List.reduceWithIndex,
  reduceReverseU: Belt_List.reduceReverseU,
  reduceReverse: Belt_List.reduceReverse,
  mapReverse2U: Belt_List.mapReverse2U,
  mapReverse2: Belt_List.mapReverse2,
  forEach2U: Belt_List.forEach2U,
  forEach2: Belt_List.forEach2,
  reduce2U: Belt_List.reduce2U,
  reduce2: Belt_List.reduce2,
  reduceReverse2U: Belt_List.reduceReverse2U,
  reduceReverse2: Belt_List.reduceReverse2,
  everyU: Belt_List.everyU,
  every: Belt_List.every,
  someU: Belt_List.someU,
  some: Belt_List.some,
  every2U: Belt_List.every2U,
  every2: Belt_List.every2,
  some2U: Belt_List.some2U,
  some2: Belt_List.some2,
  cmpByLength: Belt_List.cmpByLength,
  cmpU: Belt_List.cmpU,
  cmp: Belt_List.cmp,
  eqU: Belt_List.eqU,
  eq: Belt_List.eq,
  hasU: Belt_List.hasU,
  has: Belt_List.has,
  getByU: Belt_List.getByU,
  getBy: Belt_List.getBy,
  keepU: Belt_List.keepU,
  keep: Belt_List.keep,
  filter: Belt_List.filter,
  keepWithIndexU: Belt_List.keepWithIndexU,
  keepWithIndex: Belt_List.keepWithIndex,
  filterWithIndex: Belt_List.filterWithIndex,
  keepMapU: Belt_List.keepMapU,
  keepMap: Belt_List.keepMap,
  partitionU: Belt_List.partitionU,
  partition: Belt_List.partition,
  unzip: Belt_List.unzip,
  getAssocU: Belt_List.getAssocU,
  getAssoc: Belt_List.getAssoc,
  hasAssocU: Belt_List.hasAssocU,
  hasAssoc: Belt_List.hasAssoc,
  removeAssocU: Belt_List.removeAssocU,
  removeAssoc: Belt_List.removeAssoc,
  setAssocU: Belt_List.setAssocU,
  setAssoc: Belt_List.setAssoc,
  sortU: Belt_List.sortU,
  sort: Belt_List.sort,
  takeExn: takeExn,
  dropExn: dropExn
};

function maxIndex(xs) {
  var init_0 = xs[0];
  var init = [
    init_0,
    0
  ];
  return Belt_Array.reduceWithIndex(xs, init, (function (acc, v, idx) {
                  var curMax = acc[0];
                  if (Caml_obj.caml_compare(v, curMax) > 0) {
                    return [
                            v,
                            idx
                          ];
                  } else {
                    return [
                            curMax,
                            acc[1]
                          ];
                  }
                }))[1];
}

function updateUnsafe(ar, i, f) {
  var v = ar[i];
  ar[i] = Curry._1(f, v);
  
}

var $$Array = {
  maxIndex: maxIndex,
  updateUnsafe: updateUnsafe,
  get: Belt_Array.get,
  getExn: Belt_Array.getExn,
  set: Belt_Array.set,
  setExn: Belt_Array.setExn,
  shuffleInPlace: Belt_Array.shuffleInPlace,
  shuffle: Belt_Array.shuffle,
  reverseInPlace: Belt_Array.reverseInPlace,
  reverse: Belt_Array.reverse,
  make: Belt_Array.make,
  range: Belt_Array.range,
  rangeBy: Belt_Array.rangeBy,
  makeByU: Belt_Array.makeByU,
  makeBy: Belt_Array.makeBy,
  makeByAndShuffleU: Belt_Array.makeByAndShuffleU,
  makeByAndShuffle: Belt_Array.makeByAndShuffle,
  zip: Belt_Array.zip,
  zipByU: Belt_Array.zipByU,
  zipBy: Belt_Array.zipBy,
  unzip: Belt_Array.unzip,
  concat: Belt_Array.concat,
  concatMany: Belt_Array.concatMany,
  slice: Belt_Array.slice,
  sliceToEnd: Belt_Array.sliceToEnd,
  fill: Belt_Array.fill,
  blit: Belt_Array.blit,
  blitUnsafe: Belt_Array.blitUnsafe,
  forEachU: Belt_Array.forEachU,
  forEach: Belt_Array.forEach,
  mapU: Belt_Array.mapU,
  map: Belt_Array.map,
  getByU: Belt_Array.getByU,
  getBy: Belt_Array.getBy,
  getIndexByU: Belt_Array.getIndexByU,
  getIndexBy: Belt_Array.getIndexBy,
  keepU: Belt_Array.keepU,
  keep: Belt_Array.keep,
  keepWithIndexU: Belt_Array.keepWithIndexU,
  keepWithIndex: Belt_Array.keepWithIndex,
  keepMapU: Belt_Array.keepMapU,
  keepMap: Belt_Array.keepMap,
  forEachWithIndexU: Belt_Array.forEachWithIndexU,
  forEachWithIndex: Belt_Array.forEachWithIndex,
  mapWithIndexU: Belt_Array.mapWithIndexU,
  mapWithIndex: Belt_Array.mapWithIndex,
  partitionU: Belt_Array.partitionU,
  partition: Belt_Array.partition,
  reduceU: Belt_Array.reduceU,
  reduce: Belt_Array.reduce,
  reduceReverseU: Belt_Array.reduceReverseU,
  reduceReverse: Belt_Array.reduceReverse,
  reduceReverse2U: Belt_Array.reduceReverse2U,
  reduceReverse2: Belt_Array.reduceReverse2,
  reduceWithIndexU: Belt_Array.reduceWithIndexU,
  reduceWithIndex: Belt_Array.reduceWithIndex,
  someU: Belt_Array.someU,
  some: Belt_Array.some,
  everyU: Belt_Array.everyU,
  every: Belt_Array.every,
  every2U: Belt_Array.every2U,
  every2: Belt_Array.every2,
  some2U: Belt_Array.some2U,
  some2: Belt_Array.some2,
  cmpU: Belt_Array.cmpU,
  cmp: Belt_Array.cmp,
  eqU: Belt_Array.eqU,
  eq: Belt_Array.eq
};

exports.List = List;
exports.$$Array = $$Array;
/* No side effect */
