// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function isEmpty(xs) {
  return xs.length === 0;
}

function lastUnsafe(ar) {
  return ar[ar.length - 1 | 0];
}

function last(ar) {
  if (ar.length === 0) {
    return ;
  } else {
    return Caml_option.some(lastUnsafe(ar));
  }
}

function updateUnsafe(ar, i, f) {
  var v = ar[i];
  ar[i] = Curry._1(f, v);
  
}

function groupBy(xs, keyFn, id) {
  var empty = Belt_Map.make(id);
  return Belt_Map.map(Belt_Array.reduceU(xs, empty, (function (res, x) {
                    return Belt_Map.updateU(res, Curry._1(keyFn, x), (function (v) {
                                  if (v !== undefined) {
                                    return {
                                            hd: x,
                                            tl: v
                                          };
                                  } else {
                                    return {
                                            hd: x,
                                            tl: /* [] */0
                                          };
                                  }
                                }));
                  })), Belt_List.toArray);
}

function frequencies(ar, id) {
  return Belt_Map.map(groupBy(ar, (function (x) {
                    return x;
                  }), id), (function (prim) {
                return prim.length;
              }));
}

function scan(xs, init, f) {
  var state = new Array(xs.length);
  var cur = {
    contents: init
  };
  Belt_Array.forEachWithIndex(xs, (function (idx, x) {
          cur.contents = Curry._2(f, cur.contents, x);
          state[idx] = cur.contents;
          
        }));
  return state;
}

function max(xs) {
  var res = xs[0];
  return Belt_Array.reduce(xs, res, Caml_obj.caml_max);
}

function maxIndex(xs) {
  var init_0 = xs[0];
  var init = [
    init_0,
    0
  ];
  return Belt_Array.reduceWithIndex(xs, init, (function (acc, v, idx) {
                  var curMax = acc[0];
                  if (Caml_obj.caml_compare(v, curMax) > 0) {
                    return [
                            v,
                            idx
                          ];
                  } else {
                    return [
                            curMax,
                            acc[1]
                          ];
                  }
                }))[1];
}

function reduce1(xs, f) {
  var r = xs[0];
  for(var i = 1 ,i_finish = xs.length; i < i_finish; ++i){
    r = Curry._2(f, r, xs[i]);
  }
  return r;
}

exports.isEmpty = isEmpty;
exports.lastUnsafe = lastUnsafe;
exports.last = last;
exports.updateUnsafe = updateUnsafe;
exports.groupBy = groupBy;
exports.frequencies = frequencies;
exports.scan = scan;
exports.max = max;
exports.maxIndex = maxIndex;
exports.reduce1 = reduce1;
/* No side effect */
