// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function isEmpty(xs) {
  return Belt_List.length(xs) === 0;
}

function takeExn(list, cnt) {
  var l = Belt_List.take(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function dropExn(list, cnt) {
  var l = Belt_List.drop(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function orderedPairs(xs) {
  if (!xs) {
    return /* [] */0;
  }
  var ys = xs.tl;
  var x = xs.hd;
  return Pervasives.$at(Belt_List.map(ys, (function (y) {
                    return [
                            x,
                            y
                          ];
                  })), orderedPairs(ys));
}

function partitionBy(xs, f) {
  if (!xs) {
    return /* [] */0;
  }
  var x = xs.hd;
  var _ys = xs.tl;
  var _fx = Curry._1(f, x);
  var _acc = {
    hd: x,
    tl: /* [] */0
  };
  var _res = /* [] */0;
  while(true) {
    var res = _res;
    var acc = _acc;
    var fx = _fx;
    var ys = _ys;
    if (!ys) {
      return Belt_List.reverse(acc ? Belt_List.add(res, Belt_List.reverse(acc)) : res);
    }
    var ys$1 = ys.tl;
    var y = ys.hd;
    var fy = Curry._1(f, y);
    if (Caml_obj.caml_equal(fx, fy)) {
      _acc = Belt_List.add(acc, y);
      _fx = fy;
      _ys = ys$1;
      continue ;
    }
    _res = Belt_List.add(res, Belt_List.reverse(acc));
    _acc = {
      hd: y,
      tl: /* [] */0
    };
    _fx = fy;
    _ys = ys$1;
    continue ;
  };
}

exports.isEmpty = isEmpty;
exports.takeExn = takeExn;
exports.dropExn = dropExn;
exports.orderedPairs = orderedPairs;
exports.partitionBy = partitionBy;
/* No side effect */
