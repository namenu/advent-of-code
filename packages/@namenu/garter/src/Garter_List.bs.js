// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function isEmpty(xs) {
  return Belt_List.length(xs) === 0;
}

function takeExn(list, cnt) {
  var l = Belt_List.take(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function dropExn(list, cnt) {
  var l = Belt_List.drop(list, cnt);
  if (l !== undefined) {
    return l;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function splitAt(list, n) {
  return [
          takeExn(list, n),
          dropExn(list, n)
        ];
}

function orderedPairs(xs) {
  if (!xs) {
    return /* [] */0;
  }
  var ys = xs.tl;
  var x = xs.hd;
  return Pervasives.$at(Belt_List.map(ys, (function (y) {
                    return [
                            x,
                            y
                          ];
                  })), orderedPairs(ys));
}

function partitionBy(xs, f) {
  if (!xs) {
    return /* [] */0;
  }
  var x = xs.hd;
  var _ys = xs.tl;
  var _fx = Curry._1(f, x);
  var _acc = {
    hd: x,
    tl: /* [] */0
  };
  var _res = /* [] */0;
  while(true) {
    var res = _res;
    var acc = _acc;
    var fx = _fx;
    var ys = _ys;
    if (!ys) {
      return Belt_List.reverse(acc ? Belt_List.add(res, Belt_List.reverse(acc)) : res);
    }
    var ys$1 = ys.tl;
    var y = ys.hd;
    var fy = Curry._1(f, y);
    if (Caml_obj.caml_equal(fx, fy)) {
      _acc = Belt_List.add(acc, y);
      _fx = fy;
      _ys = ys$1;
      continue ;
    }
    _res = Belt_List.add(res, Belt_List.reverse(acc));
    _acc = {
      hd: y,
      tl: /* [] */0
    };
    _fx = fy;
    _ys = ys$1;
    continue ;
  };
}

var length = Belt_List.length;

var size = Belt_List.size;

var head = Belt_List.head;

var headExn = Belt_List.headExn;

var tail = Belt_List.tail;

var tailExn = Belt_List.tailExn;

var add = Belt_List.add;

var get = Belt_List.get;

var getExn = Belt_List.getExn;

var make = Belt_List.make;

var makeByU = Belt_List.makeByU;

var makeBy = Belt_List.makeBy;

var shuffle = Belt_List.shuffle;

var drop = Belt_List.drop;

var take = Belt_List.take;

var concat = Belt_List.concat;

var concatMany = Belt_List.concatMany;

var reverseConcat = Belt_List.reverseConcat;

var flatten = Belt_List.flatten;

var mapU = Belt_List.mapU;

var map = Belt_List.map;

var zip = Belt_List.zip;

var zipByU = Belt_List.zipByU;

var zipBy = Belt_List.zipBy;

var mapWithIndexU = Belt_List.mapWithIndexU;

var mapWithIndex = Belt_List.mapWithIndex;

var fromArray = Belt_List.fromArray;

var toArray = Belt_List.toArray;

var reverse = Belt_List.reverse;

var mapReverseU = Belt_List.mapReverseU;

var mapReverse = Belt_List.mapReverse;

var forEachU = Belt_List.forEachU;

var forEach = Belt_List.forEach;

var forEachWithIndexU = Belt_List.forEachWithIndexU;

var forEachWithIndex = Belt_List.forEachWithIndex;

var reduceU = Belt_List.reduceU;

var reduce = Belt_List.reduce;

var reduceWithIndexU = Belt_List.reduceWithIndexU;

var reduceWithIndex = Belt_List.reduceWithIndex;

var reduceReverseU = Belt_List.reduceReverseU;

var reduceReverse = Belt_List.reduceReverse;

var mapReverse2U = Belt_List.mapReverse2U;

var mapReverse2 = Belt_List.mapReverse2;

var forEach2U = Belt_List.forEach2U;

var forEach2 = Belt_List.forEach2;

var reduce2U = Belt_List.reduce2U;

var reduce2 = Belt_List.reduce2;

var reduceReverse2U = Belt_List.reduceReverse2U;

var reduceReverse2 = Belt_List.reduceReverse2;

var everyU = Belt_List.everyU;

var every = Belt_List.every;

var someU = Belt_List.someU;

var some = Belt_List.some;

var every2U = Belt_List.every2U;

var every2 = Belt_List.every2;

var some2U = Belt_List.some2U;

var some2 = Belt_List.some2;

var cmpByLength = Belt_List.cmpByLength;

var cmpU = Belt_List.cmpU;

var cmp = Belt_List.cmp;

var eqU = Belt_List.eqU;

var eq = Belt_List.eq;

var hasU = Belt_List.hasU;

var has = Belt_List.has;

var getByU = Belt_List.getByU;

var getBy = Belt_List.getBy;

var keepU = Belt_List.keepU;

var keep = Belt_List.keep;

var filter = Belt_List.filter;

var keepWithIndexU = Belt_List.keepWithIndexU;

var keepWithIndex = Belt_List.keepWithIndex;

var filterWithIndex = Belt_List.filterWithIndex;

var keepMapU = Belt_List.keepMapU;

var keepMap = Belt_List.keepMap;

var partitionU = Belt_List.partitionU;

var partition = Belt_List.partition;

var unzip = Belt_List.unzip;

var getAssocU = Belt_List.getAssocU;

var getAssoc = Belt_List.getAssoc;

var hasAssocU = Belt_List.hasAssocU;

var hasAssoc = Belt_List.hasAssoc;

var removeAssocU = Belt_List.removeAssocU;

var removeAssoc = Belt_List.removeAssoc;

var setAssocU = Belt_List.setAssocU;

var setAssoc = Belt_List.setAssoc;

var sortU = Belt_List.sortU;

var sort = Belt_List.sort;

exports.length = length;
exports.size = size;
exports.head = head;
exports.headExn = headExn;
exports.tail = tail;
exports.tailExn = tailExn;
exports.add = add;
exports.get = get;
exports.getExn = getExn;
exports.make = make;
exports.makeByU = makeByU;
exports.makeBy = makeBy;
exports.shuffle = shuffle;
exports.drop = drop;
exports.take = take;
exports.concat = concat;
exports.concatMany = concatMany;
exports.reverseConcat = reverseConcat;
exports.flatten = flatten;
exports.mapU = mapU;
exports.map = map;
exports.zip = zip;
exports.zipByU = zipByU;
exports.zipBy = zipBy;
exports.mapWithIndexU = mapWithIndexU;
exports.mapWithIndex = mapWithIndex;
exports.fromArray = fromArray;
exports.toArray = toArray;
exports.reverse = reverse;
exports.mapReverseU = mapReverseU;
exports.mapReverse = mapReverse;
exports.forEachU = forEachU;
exports.forEach = forEach;
exports.forEachWithIndexU = forEachWithIndexU;
exports.forEachWithIndex = forEachWithIndex;
exports.reduceU = reduceU;
exports.reduce = reduce;
exports.reduceWithIndexU = reduceWithIndexU;
exports.reduceWithIndex = reduceWithIndex;
exports.reduceReverseU = reduceReverseU;
exports.reduceReverse = reduceReverse;
exports.mapReverse2U = mapReverse2U;
exports.mapReverse2 = mapReverse2;
exports.forEach2U = forEach2U;
exports.forEach2 = forEach2;
exports.reduce2U = reduce2U;
exports.reduce2 = reduce2;
exports.reduceReverse2U = reduceReverse2U;
exports.reduceReverse2 = reduceReverse2;
exports.everyU = everyU;
exports.every = every;
exports.someU = someU;
exports.some = some;
exports.every2U = every2U;
exports.every2 = every2;
exports.some2U = some2U;
exports.some2 = some2;
exports.cmpByLength = cmpByLength;
exports.cmpU = cmpU;
exports.cmp = cmp;
exports.eqU = eqU;
exports.eq = eq;
exports.hasU = hasU;
exports.has = has;
exports.getByU = getByU;
exports.getBy = getBy;
exports.keepU = keepU;
exports.keep = keep;
exports.filter = filter;
exports.keepWithIndexU = keepWithIndexU;
exports.keepWithIndex = keepWithIndex;
exports.filterWithIndex = filterWithIndex;
exports.keepMapU = keepMapU;
exports.keepMap = keepMap;
exports.partitionU = partitionU;
exports.partition = partition;
exports.unzip = unzip;
exports.getAssocU = getAssocU;
exports.getAssoc = getAssoc;
exports.hasAssocU = hasAssocU;
exports.hasAssoc = hasAssoc;
exports.removeAssocU = removeAssocU;
exports.removeAssoc = removeAssoc;
exports.setAssocU = setAssocU;
exports.setAssoc = setAssoc;
exports.sortU = sortU;
exports.sort = sort;
exports.isEmpty = isEmpty;
exports.takeExn = takeExn;
exports.dropExn = dropExn;
exports.splitAt = splitAt;
exports.orderedPairs = orderedPairs;
exports.partitionBy = partitionBy;
/* No side effect */
